---
layout: post
title:  'HOWTO: Install WordPress on Nginx'
---
I recently moved all of my sites from a cheap shared host to a shiny new VPS(Virtual Private Server) at "SliceHost":http://www.slicehost.com/, and couldn't be happier. Running your own VPS means a great amount of flexibility since you have full root access to the server and get to configure everything exactly how you want it. That said, it also means that if you want to maintain high performance, you have to keep your resource usage to a minimum.

"Apache":http://httpd.apache.org/ is a very well-establish web server that can handle just about any situation. Unfortunately, that flexibility comes at the cost of size and relatively high demands on server resources. "Nginx":http://nginx.net/ ("engine x") is a lightweight web server/reverse proxy that is very efficient and perfect for hosting WordPress. Read on to see how that can be done...

h2(#step-one). Step One: FastCGI

First off, Nginx does not provide FastCGI for you (FastCGI is what your web server uses to interact with WordPress's PHP(PHP: Hypertext Preprocessor) code), so you've got to have a way to spawn your own FastCGI processes. My preferred method is to use the @spawn-fcgi@ program provided by the web server "lighttpd":http://www.lighttpd.net/. You _can_ use PHP's built-in FastCGI manager @php-cgi@ to "do the same thing":http://blog.kovyrin.net/2006/05/30/nginx-php-fastcgi-howto/, but it's not as straight-forward. Plus, if you learn how to use @spawn-fcgi@, you can easily adapt it for use with other web applications requiring FastCGI.

h3. Install spawn-fcgi

To download and install @spawn-fcgi@, run the following commands. Don't worry, all of the building happens in your current directory...nothing else will be installed on your machine.

{% highlight bash-session %}
$ wget http://www.lighttpd.net/download/lighttpd-1.4.18.tar.bz2
$ tar -xvjf lighttpd-1.4.18.tar.bz2
$ cd lighttpd-1.4.18/
$ ./configure
$ make
$ sudo cp src/spawn-fcgi /usr/bin/spawn-fcgi
{% endhighlight %}

__==NOTE==: If you're following the steps above verbatim, you will need to have root privileges in order to copy the binary to its final location...everything else should work fine as a normal user. To gain root privileges, the program @sudo@ was used in the example above; you may or may not have access to @sudo@ on your machine.__

After @spawn-fcgi@ has been copied to the desired location, you can safely remove the build directory and original source file:

{% highlight bash-session %}
$ cd ..
$ rm -rf lighttpd-1.4.18/
$ rm lighttpd-1.4.18.tar.bz2
{% endhighlight %}

h3. Run spawn-fcgi

This part will be fairly distribution-specific, but I'll provide the basic command that you'll need. What you want to do is find a way to run this command as part of your init scripts so the processes will be spawned automatically when you reboot your server.

bc. /usr/bin/spawn-fcgi -f /usr/bin/php-cgi -a 127.0.0.1 -p 53217 -P /var/run/fastcgi-php.pid

* @-f@ &rarr; the filename of the fcgi-application; in our case we want "php-cgi", which is provided by your distribution's PHP package. If you don't know where to find it, try running @which php-cgi@ on the command line.
* @-a@ &rarr; the IP address to bind the processes to; in our case we want the localhost
* @-p@ &rarr; the port number to bind the processes to; pick whatever you want that won't cause a conflict (technically it would be best to pick a random number between 49152 and 65535), just make sure to remember the number and use that same port for your Nginx configuration file later on
* @-P@ &rarr; the location where to save the process id file; you can use this file to easily kill the processes later

For better security, you can also spawn the processes as a non-privileged user by specifying the user/group with the @-u@ and @-g@ flags respectively. For more information on all the available options, run @spawn-fcgi -h@ on the command line.

If you're interested in seeing the complete init script that I wrote for use with "Arch Linux":http://www.archlinux.org/, you can download it here: "fastcgi-php":http://elasticdog.com/code/2008/02/fastcgi-php

h2(#step-two). Step Two: Complete 83.33% of the Famous 5-Minute Install

Next you should download the WordPress files and extract them to their final location on your server. Simply follow steps 1-5 of the "Famous 5-Minute Install":http://codex.wordpress.org/Installing_WordPress#Famous_5-Minute_Install (the 6th and final step requires that your web server be up and running properly, so we'll do it later). This guide will assume that you extracted the WordPress core files here: @/srv/www/nginx/domain.com/@

h2(#step-three). Step Three: Nginx Configuration

To get the web server up and running properly, the file you need to edit is called "nginx.conf" and is installed in different places depending on your Linux distribution. If you install Nginx from source, the default location is @/usr/local/nginx/conf/nginx.conf@, however yours may be somewhere else.

Once you find that file, open it with your favorite text editor and add a server declaration that looks something like this (I'll cover what each part means after posting the code):

{% highlight nginx %}
server {
    listen       12.34.56.78:80;              # your server's public IP address
    server_name  domain.com;                  # your domain name
    root         /srv/http/nginx/domain.com;  # absolute path to your WordPress installation

    try_files $uri $uri/ /index.php;

    location ~ \.php$ {
        include        fastcgi_params;
        fastcgi_pass   localhost:53217;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    }
}
{% endhighlight %}

div(sourcelink). Download Source Code: "nginx.conf.txt":http://elasticdog.com/code/2008/02/nginx-conf.txt

You will need to edit the configuration above using your own information. The first part is merely the server declaration where you define what your server's publicly available IP address is and what domain name that address is associated with.

Next we add some default settings which point Nginx to the absolute path of the WordPress installation on your server. After that, the @try_files@ declaration automatically checks for the existence of files in order, and returns the first file that is found. The key part here is that WordPress uses the "Front Controller" design pattern, meaning that any request for a file that does not exist on the server should be handled by the main index.php file. So that's exactly what we do...if the requested URI(Uniform Resrouce Identifier) exists on our local filesystem (images, css stylesheets, etc.), then we'll serve it up directly...if the requested URI does not exist on the filesystem, we forward that request on to index.php.

Last, we add a location block that tells Nginx to dynamically forward PHP requests to the FastCGI processes we "spawned earlier":#step-one. You just have to make sure that the port number matches what we did above. That's it!

h2(#step-four). Step Four: Finishing Up

Everything should be good to go...all you need to do now is start your Nginx server process (another distribution specific command), then complete the 6th step of the "Famous 5-Minute Install":http://codex.wordpress.org/Installing_WordPress#Famous_5-Minute_Install and you should have WordPress up and running on Nginx!

If any of this needs further clarification or you're just having trouble, drop me a line and I'll see what I can do to help...
