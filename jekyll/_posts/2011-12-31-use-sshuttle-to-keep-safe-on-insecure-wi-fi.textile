---
layout: post
title:  'Use sshuttle to Keep Safe on Insecure Wi-Fi'
date:   2011-12-31 10:56
categories:
- network
- osx
- security
---
If you've ever used an insecure Wi-Fi connection in a public place (think coffee shop, airport, etc.), your personal information could be at risk. Anyone on the local network could potentially be monitoring your traffic and they could even "hijack your sessions":http://codebutler.github.com/firesheep/ to control accounts that you've logged into.

Every week I "meet up with some friends":http://hackerbreakfast.com/ to work on personal projects, and the venue only offers an open wireless connection with no encryption. To mitigate the risk of leaking personal information, I've tried a handful of strategies and eventually settled on using "sshuttle":https://github.com/apenwarr/sshuttle.

h2(#sshuttle). What is sshuttle?

The sshuttle utility is part transparent proxy, part Virtual Private Network (VPN), and part SSH(Secure Shell). It solves a lot of common problems with encrypting your traffic, and it does so in a very efficient way.

There's no need for a complicated pre-existing infrastructure. All you need is Python 2.x, and a remote machine you can SSH to that also has Python installed. You don't even have to be an administrator on the remote machine. The project's "README":https://github.com/apenwarr/sshuttle/blob/master/README.md has a lot more information on its theory, design, and alternate uses.

h3(#previous). Previous Method

As an aside, I had previously relied on creating a SOCKS proxy with SSH, and then tunneling my web traffic through it...

{% highlight bash %}
$ ssh -fqND 1080 example.com
{% endhighlight %}

But, you have to adjust your machine's proxy configuration settings each time you set up the tunnel, and then tear it all down when you're done. This method *will not* force absolutely all traffic over the tunnel, as things like DNS(Domain Name System) lookups and a lot of command-line tools will just ignore the proxy. You're also encapsulating TCP(Transmission Control Protocol)-over-TCP, which can cause performance problems.

I briefly messed with the "Sidestep project":http://chetansurpur.com/projects/sidestep/ to automate these setup/teardown steps on OS X, but ran across repeated authentication issues and wasn't overly impressed with its developer. Overall, I needed a more elegant solution.

h2(#installation). Installation

I wanted to use sshuttle on OS X Lion, and even though it's primarily a command-line utility, it also comes with a graphical user interface wrapper that will sit in the menu bar. If you just want the command-line script and already use "Homebrew":http://mxcl.github.com/homebrew/, @brew install sshuttle@ is the way to go. If you don't use Homebrew and/or want the GUI, I've got your back...

h3(#building). Building sshuttle from Source

Unfortunately, pre-compiled binaries are not made available for every release, and documentation for building sshuttle is non-existent. The project uses a "build system called 'redo'":https://github.com/apenwarr/redo instead of the more-customary 'make', so the process is a bit different than what most people are used to.

Luckily, the sshuttle repository includes a shell script named 'do', which is a simplified version of redo, so you _won't need to_ install any additional build software. The only real dependencies are "Python":http://python.org/ and two Python modules to generate the man page (feel free to use @pip install@ instead of @easy_install@, if you prefer):

{% highlight bash %}
$ easy_install markdown BeautifulSoup
{% endhighlight %}

Once you've installed those two modules, you're all set to build...

__==NOTE==: You may have to adjust paths or permissions slightly depending on your machine's setup.__

{% highlight bash %}
$ mkdir -p /usr/local/libexec
$ git clone git://github.com/apenwarr/sshuttle.git /usr/local/libexec/sshuttle
$ cd /usr/local/libexec/sshuttle/
$ ./do all
{% endhighlight %}

Once sshuttle is built, we just make symlinks so the binary and man page are in the proper places:

{% highlight bash %}
$ ln -s /usr/local/libexec/sshuttle/sshuttle /usr/local/bin
$ mkdir -p /usr/local/share/man/man8
$ ln -s /usr/local/libexec/sshuttle/Documentation/sshuttle.8 /usr/local/share/man/man8
{% endhighlight %}

For the GUI app, we need to create an _alias_ instead a symlink, because ["Spotlight":http://en.wikipedia.org/wiki/Spotlight_(software)] will not index symlinks. Yes, you could just copy __==Sshuttle VPN.app==__ directly into __/Applications__, but then you'd have to remember to copy it every time you update/rebuild sshuttle.

Without getting too technical, aliases are a lot like symlinks but they use extra metadata called "resource forks" to follow a file (even when it's moved) rather then blindly pointing to a path. More importantly, Spotlight *will* index them. There's no way to create an alias from the command line, so you have to use Finder:

# Open Finder and press *Command-Shift-G* to open the "Go to the folder:" dialog box.
# Type @/usr/local/libexec/sshuttle/ui-macos@ in the box and click the *Go* button.
<img src="/images/2011/12/go-to-the-folder.png" alt="Go to the folder: Dialog Box" width="868" height="536" />
# Click and hold __==Sshuttle VPN.app==__, then while holding down both the *Command* and *Option* keys, drag the app over to _Applications_ on the left and release the mouse button.
<img src="/images/2011/12/sshuttle-alias.png" alt="Create the sshuttle Alias" width="868" height="536" />

h2(#configuration). Configuration

Due to some sysctl changes in OS X Lion, you will have to reboot your machine after you run sshuttle for the first time. An adjustment to the @net.inet.ip.scopedroute@ kernel flag needs to be made, and it can no longer be done during runtime. This is required so forwarding rules will be honored by the firewall.

Everything should be handled automatically by sshuttle, but if your curious to see the change, you can display the boot kernel flags and current settings with the following commands:

{% highlight bash %}
$ defaults read /Library/Preferences/SystemConfiguration/com.apple.Boot
{
    "Kernel Flags" = "";
}
$ sysctl -a | grep scopedroute
net.inet.ip.scopedroute: 1
net.inet6.ip6.scopedroute: 1
{% endhighlight %}

After you run sshuttle for the first time and then reboot the machine, you can confirm the updated status:

{% highlight bash %}
$ defaults read /Library/Preferences/SystemConfiguration/com.apple.Boot
{
    "Kernel Flags" = "net.inet.ip.scopedroute=0";
}
$ sysctl -a | grep scopedroute
kern.bootargs: net.inet.ip.scopedroute=0
net.inet.ip.scopedroute: 0
net.inet6.ip6.scopedroute: 1
{% endhighlight %}

h2(#usage). Usage

Finally we can get down to actually using sshuttle! It's flexible enough to do fancier things, but for our particular use case, we just need to forward all traffic over the tunnel.

The basic command to achieve our goal looks like this:

{% highlight bash %}
$ sshuttle --dns -r example.com 0/0
{% endhighlight %}

__==NOTE==: Sshuttle will honor your @~/.ssh/config@ connection settings, but you can also manually specify a different username/port, if necessary:__

{% highlight bash %}
$ sshuttle --dns -r username@example.com:2222 0/0
{% endhighlight %}

Run that, and all of your traffic (_including_ DNS requests) will be transparently proxied through an SSH connection to _example.com_. You can verify this by browsing to "http://ifconfig.me":http://ifconfig.me.

To stop forwarding traffic, just press @Ctrl-c@ back in the terminal. We can do a bit better though by forking the process into the background so we don't tie up our terminal session. These are the aliases I use to make setting up and tearing down the tunnel easier:

{% highlight bash %}
alias tunnel='sshuttle --dns --daemon --pidfile=/tmp/sshuttle.pid --remote=example.com 0/0'
alias tunnelx='[[ -f /tmp/sshuttle.pid ]] && kill $(cat /tmp/sshuttle.pid) && echo "Disconnected."'
{% endhighlight %}

The __==Sshuttle VPN.app==__ GUI is pretty self-explanatory, just make sure to enable the _Send DNS requests through this server_ checkbox, and select _Send all traffic through this server_ for the "Network routes:" option.

h2(#bugs). Known Bugs

You may see a bunch of "*warning: closed channel ...*" messages when running sshuttle (either on STDOUT or in your system.log), but these warnings are safe to ignore. The developer "knows about the issue":http://groups.google.com/group/sshuttle/browse_thread/thread/853316d8e0a90269/4febfe3136aba5df and is thinking of the best way to suppress/eliminate the condition.

Also, prior to version 0.60 of sshuttle, there was "a bug in the GUI application":http://groups.google.com/group/sshuttle/browse_thread/thread/6603f9d17ae8eec4 when disconnecting tunnels, where the controlling terminal would disappear before firewall rules could cleaned up. This would leave the network in an odd state and all DNS lookups would fail. It should be fixed now, but if you experience networking trouble after disconnecting a sshuttle tunnel, you can see the current firewall rules using:

{% highlight bash %}
$ sudo ipfw list
{% endhighlight %}

...and you can manually flush out those rules to fix connectivity by running:

{% highlight bash %}
$ sudo ipfw -f flush
{% endhighlight %}

Be aware though, *this will flush out all rules*, not just the rules set by sshuttle, so it may have unintended consequences. If you're unsure, you can always reboot the machine to get connectivity back to normal.

h2(#update). Update sshuttle

Since our installation of sshuttle is managed via git, updating to the latest version is pretty straightforward:

{% highlight bash %}
$ cd /usr/local/libexec/sshuttle
$ git pull
$ ./do all
{% endhighlight %}

h2(#conclusion). Conclusion

Admittedly, sshuttle takes a bit more work than other solutions to get up and running, but the security it provides gives me peace of mind when forced to use insecure Wi-Fi networks.

If you have any issues, there is an "active mailing list":http://groups.google.com/group/sshuttle for the project, or you can always "send me a note":/about/#contact and I'll see what I can do to help.
